---
author: Charles Batsaikhan
title: "capstone"
format: html
editor: visual
---

# Land surface temperature 2016 dataset

```{r}
library(sf)
library(readr)
library(dplyr)
library(geojsonio)
library(ggplot2)
library(maps)
library(tidycensus)
library(leaflet)
library(RColorBrewer)
library(terra)
```

## 2016 land temperature data

[watch this video on spatial mapping in R](https://www.youtube.com/watch?v=TZ8CxNNHiUU&t=1028s)

```{r}

#twin cities geo database layers (2022)
twin_cities_layers <- st_layers(dsn="/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/fgdb_env_cva_lst2022/env_cva_lst2022.gdb")
twin_cities_layers

lst2022 <- st_read(dsn = "/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/fgdb_env_cva_lst2022/env_cva_lst2022.gdb", layer = "LandSurfaceTemperature2022")


# lst <- arc.open(dsn = "/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/fgdb_env_cva_lst2022/env_cva_lst2022.gdb", layer = "LandSurfaceTemperature2022")

```






# Trying to figure out how to plot Land Surface Temp


```{r}
# msp_tif <- rast("~/Documents/School/Capstone/project files copy/data/Minneapolis_City_Cleaned.tif")
# 
# msp_poly <-  as.polygons(msp_tif, dissolve = TRUE)
# 
# msp_sf <- st_as_sf(msp_poly)

```

```{r}
lst2022 <- rast("~/Documents/School/Capstone/project files copy/data/lst2022_raster.tiff")

print(lst2022)

plot(lst2022)

summary(lst2022)
minmax(lst2022)
```

```{r}
racial_minneapolis <- st_transform(racial_minneapolis, crs = crs(lst2022))

lst2022_clipped <- crop(lst2022, racial_minneapolis)

lst2022_masked <- mask(lst2022_clipped, racial_minneapolis)

plot(lst2022_masked)

```

```{r}
lst_df <- as.data.frame(lst2022, xy=TRUE)
ggplot()+
  geom_tile(data = lst_df, aes(x = x, y = y, fill = lst2022_raster)) +
  geom_sf(data = racial_minneapolis, color = "red", fill = NA) +
  scale_fill_viridis_c(name = "LST (°C)") +
  labs(title = "Raster and Racial Covenants Overlay") +
  theme_minimal()
```









# Racial Covenenats Data

-   Doc_ID: government document ID of historical property deed.
-   Deed_ID.x: Identifier for the specific deed associated with the racial covenant.
-   Racial_Res.x: Indicates the presence of racial restrictions in the covenant.
-   Type_Res.x: Specifies the type of restriction associated with the racial covenant.
-   Addition.x: Name of the property addition (subdivision or plat) related to the property deed.

```{r}
racial_covenants <- st_read("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/Hennepin_County_Racial_Covenants")

racial_map_data <- st_read("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/Hennepin_County_Racial_Covenants", layer="Hennepin_County_Racial_Covenants")

racial_covenants_csv <- read_csv("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/Hennepin_County_Racial_Covenants_Table.csv")
# 
# racial_convenants_full <- left_join(racial_covenants, racial_covenants_csv, by="Doc_ID")

```

## Cleaning racial convenant data

```{r}
# table(duplicated(racial_covenants_csv$Doc_ID))
# 
# duplicated_docs <- racial_covenants%>%
#   filter(Doc_ID %in% Doc_ID[duplicated(Doc_ID)])
# 
# head(duplicated_docs)

racial_covenants_joined <- left_join(racial_covenants, racial_covenants_csv, by=c("Join_ID_1"="Join_ID"))
head(racial_covenants_joined)


```

## analyzing the text of the racial restriciton in the deed

```{r}
# racial_covenants_joined%>%
#   select(Racial_Res.x, Racial_Res.y)%>%
#   head(10)
# 
# Keywords <- c("Caucasian", "colored", "race", "occupy", "Negro", "Negreos", "asian")
# 
# filtered_racial_res <- racial_covenants_joined%>%
#   filter(grepl(paste(Keywords, collapse = "|"), Racial_Res.x, ignore.case=TRUE))
# 
# filtered_racial_res%>%
#   select(Racial_Res.x, Racial_Res.y)%>%
#   head()

```

## Map of MSP(tidycensus)

```{r}
census_api_key("a2fc116bc3c565186b0985c02b89314762336aaf", overwrite=TRUE)
```

```{r}
cities <- c(
  "Minneapolis city, Minnesota", "Brooklyn Center city, Minnesota", "Edina city, Minnesota", "Golden Valley city, Minnesota",
  "Hopkins city, Minnesota", "New Hope city, Minnesota", "St. Louis Park city, Minnesota", "St. Anthony city (Hennepin and Ramsey Counties), Minn",
  "Richfield city, Minnesota", "Robbinsdale city, Minnesota", "Crystal city, Minnesota"
)

#Cities names and population data from the census
msp_places_data <- get_acs(
  geography="place",
  state="MN",
  variables="B01003_001",
  geometry=TRUE,
  year=2020
)%>%
  filter(NAME %in% cities)%>%
  st_transform(crs=4326)

# #trying to see city names so I can match them correctly when making my map
# unique_places <- msp_places_data%>%
#   distinct(NAME)%>%
#   arrange(NAME)
# 
# #filtering the data for the selected cities
# selected_places <- msp_places_data %>%
#   filter(NAME %in% cities)

palette <- colorNumeric(palette="viridis", domain=selected_places$estimate)

#the Leaflet map
MSP_map_totPopulation <- leaflet(data=selected_places)%>%
  addProviderTiles(providers$CartoDB.Positron)%>%
  addPolygons(
    fillColor = ~palette(estimate),
    color="black",
    weight=1,
    opacity=1,
    fillOpacity = 0.7,
    label= ~paste(NAME< "<br>Populatioin:", estimate),
    highlightOptions = highlightOptions(
      weight=3,
      color="blue",
      fillOpacity=0.9,
      bringToFront=TRUE
    )
  )%>%
  addLegend(
    pal=palette,
    values=~estimate,
    title="Population Estimate",
    position="bottomright"
  )

MSP_map_totPopulation

```

## Map of blocks of groups for population data

```{r}

block_groups <- get_acs(
  geography = "block group",
  state = "MN",
  variables = "B01003_001",
  geometry = TRUE,
  year = 2020,
  survey = "acs5"
) %>%
  st_transform(crs = 4326) %>%
  mutate(
    area_km2 = as.numeric(st_area(geometry)) / 1e6, 
    pop_density = estimate / area_km2                
  )

city_boundary_joined <- st_join(block_groups, msp_places_data, join = st_intersects)

selected_block_groups <- city_boundary_joined %>%
  filter(!is.na(NAME.y)) %>%  
  rename(
    block_group_name = NAME.x,
    city_name = NAME.y,
    population = estimate.x
  )


block_group_palette <- colorNumeric(
  palette = c("#f0f0f0", "#b0b0b0", "#606060", "#000000"),
  domain = block_groups$pop_density,
  na.color = "transparent"
)

block_group_map <- leaflet(data = selected_block_groups) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~block_group_palette(pop_density),
    color = "black",
    weight = 0.5,
    opacity = 1,
    fillOpacity = 0.7,
    label = ~paste(
      "City:", city_name,
      "<br>Population Density:", round(pop_density, 1), "people/km²"
    ),
    highlightOptions = highlightOptions(
      weight = 2,
      color = "darkgray",
      fillOpacity = 0.9,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    pal = block_group_palette,
    values = ~pop_density,
    title = "Population Density (people/km²)",
    position = "bottomright"
  )


block_group_map
```

## Map of population/km

```{r}

selected_places_km <- selected_places %>%
  mutate(
    area_km2 = as.numeric(st_area(geometry)) / 1e6,  
    pop_density = estimate / area_km2               
  )

density_palette <- colorNumeric(
  palette = c("#f0f0f0", "#b0b0b0", "#606060", "#000000"),
  domain = selected_places$pop_density,
  na.color = "transparent"
)

popdensity_map <- leaflet(data = selected_places_km) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~density_palette(pop_density),
    color = "black",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.7,
    label = ~paste(
      "City:", NAME,
      "<br>Population Density:", round(pop_density, 1), "people/km²"
    ),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkgray",
      fillOpacity = 0.9,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    pal = density_palette,
    values = ~pop_density,
    title = "Population Density (people/km²)",
    position = "bottomright"
  )

# Display the map
popdensity_map
```

## just the map of the MSP selected cities

```{r}
MSP_map <- leaflet(data = selected_places) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    color = "black",
    weight = 2,
    opacity = 1,
    fillOpacity = 0,  
    label = ~NAME,
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkgray",
      fillOpacity = 0.2,
      bringToFront = TRUE
    )
  ) %>%
  addMiniMap(toggleDisplay = TRUE) %>%
  addScaleBar(position = "bottomleft")

MSP_map
```

# Redlining Data

```{r}

redlining_data <- st_read("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/MSP_redlining.json")

redlining_data_layers <- st_layers("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/MSP_redlining.json")
redlining_data_layers

redlining_MSP <- st_read("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/MSP_redlining.json", layer="MSP_redlining")

```

```{r}
glimpse(redlining_data)

grades <- unique(redlining_data$grade)
grade_palette <- colorFactor(
  palette = brewer.pal(4, "YlOrRd"),
  domain = HOLC_MPLS$grade,
  levels = c("A", "B", "C", "D")  # Ensure the grades are ordered correctly
)
```

## Making the redlining Map

```{r}
redlining_map <- leaflet(data = redlining_data) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~grade_palette(grade),
    color = "black",
    weight = 1,
    opacity = 0.8,
    fillOpacity = 0.6,
    label = ~paste("Grade:", grade),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "blue",
      fillOpacity = 0.8,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    pal = grade_palette,
    values = ~grade,
    title = "Redlining Grade",
    position = "bottomright"
  )


redlining_map

MSP_redlining_map <- MSP_map %>%
  addPolygons(
    data = redlining_data,
    fillColor = ~grade_palette(grade),
    color = "red",
    weight = 1,
    opacity = 0.8,
    fillOpacity = 0.5,
    label = ~paste("City:", name, "<br>Grade:", grade),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkred",
      fillOpacity = 0.7,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    pal = grade_palette,
    values = redlining_data$grade,
    title = "Redlining Grade",
    position = "bottomright"
  )

# Display the updated map
MSP_redlining_map
```

# Analysis: HOLC Grade and Racial Covenants

```{r}
# Transform the CRS of racial covenants data to WGS 84 (EPSG:4326) so I can also map with redlining and MSP map
racial_covenants_wgs84 <- st_transform(racial_covenants_joined, crs = 4326)

racial_covenants_wgs84 <- racial_covenants_wgs84 %>%
  mutate(
    Racial_Res_wrapped = sapply(Racial_Res.x, function(text) {
      # Split the text into lines of max 50 characters and join with <br>
      paste(strwrap(text, width = 25), collapse = "<br>")
    })
  )
racial_covenants_map <- leaflet(data = racial_covenants_wgs84) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = "purple",
    color = "purple",
    weight = 1,
    opacity = 0.8,
    fillOpacity = 0.5,
    label = ~paste(
      "City:", City.x,
      "Year:", Ex_Year.x,
      "Restriction:", Racial_Res_wrapped
    ),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkpurple",
      fillOpacity = 0.7,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    colors = "purple",
    labels = "Racial Covenants",
    title = "Hennepin County Racial Covenants",
    position = "bottomright"
  )

# Display the map
racial_covenants_map


MSP_racial_covenants_map <- MSP_map %>%
  addPolygons(
    data = racial_covenants_wgs84,
    fillColor = "purple",
    color = "purple",
    weight = 1,
    opacity = 0.8,
    fillOpacity = 0.3,
    label = ~paste("City:", City.x, "<br>Year:", Ex_Year.x, "<br>Restriction:", Racial_Res.x),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkpurple",
      fillOpacity = 0.5,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    colors = "purple",
    labels = "Racial Covenants",
    title = "Hennepin County Racial Covenants",
    position = "bottomleft"
  )


MSP_racial_covenants_map



MSP_redlining_racial_map <- MSP_redlining_map %>%
  addPolygons(
    data = racial_covenants_wgs84,
    fillColor = "purple",
    color = "purple",
    weight = 1,
    opacity = 0.8,
    fillOpacity = 0.3,
    label = ~paste(
      "City:", City.x,
      "<br>Year:", Ex_Year.x,
      "<br>Restriction:", Racial_Res_wrapped
    ),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkpurple",
      fillOpacity = 0.5,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    colors = "purple",
    labels = "Racial Covenants",
    title = "Hennepin County Racial Covenants",
    position = "bottomleft"
  )


MSP_redlining_racial_map

```

```{r}
racial_minneapolis <- racial_covenants_wgs84%>%
  filter(City.x=="MINNEAPOLIS")

# Add the racial covenants overlay to the existing redlining map
minneapolis_map <- redlining_map %>%
  addPolygons(
    data = racial_minneapolis,
    fillColor = "purple",
    color = "purple",
    weight = 1,
    opacity = 0.8,
    fillOpacity = 0.3,
    label = ~paste(
      "City:", City.x,
      "<br>Year:", Ex_Year.x,
      "<br>Restriction:", Racial_Res_wrapped
    ),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "darkpurple",
      fillOpacity = 0.5,
      bringToFront = TRUE
    )
  ) %>%
  addLegend(
    colors = "purple",
    labels = "Racial Covenants",
    title = "Racial Covenants Overlay",
    position = "bottomleft"
  )

# Display the updated map
minneapolis_map

```

```{r}
# library(htmlwidgets)
# saveWidget(
#   widget = minneapolis_map,
#   file = "MSP_redlining_racial_map.html",
#   selfcontained = TRUE
# )
```

# SAR Lag Model

```{r}
final_spatial <- st_read("/Users/munkhbatbatsaikhan/Documents/School/Capstone/project files copy/data/final_spatial.geojson")

final_spatial <- st_transform(final_spatial, crs=st_crs(msp_sf))

st_crs(final_spatial)

lag_model_data <- st_join(msp_sf, final_spatial, join=st_intersects)

head(lag_model_data)


```

```{r}
msp_sf <- msp_sf%>%
  mutate(id=row_number())


summary(msp_sf)

msp_sf %>% 
  ggplot() +
  geom_sf(mapping = aes(fill = `Minneapolis City`))
plot(st_geometry(msp_sf))



summary(final_spatial)
```


```{r}
library(spdep)

#neighbors list
neighbors <- poly2nb(msp_sf)

#convert neighbors list to spatial weights
lw <- nb2listw(neighbors)

library(spatialreg)

model <- lagsarlm(`Minneapolis City` ~1, data=msp_sf, listw=lw)
summary(model)
```

> Summary of the model:
- Only 1 intercept term, meaning only 1 predictor was used.
- Residuals: difference between observed and predicted. Median being close to 0 suggests no strong bias.
- Intercept 8.535: baseline value of Minneapolis City after accoutning for Rho
- Rho measures the spatial dependence, capturing how much the LST in one area is infuenced by neighboring areas. For example this rho values suggests that heat patterns in MSP are spatially clustered because the value if high.


```{r}
moran.test(residuals(model), lw)
```

