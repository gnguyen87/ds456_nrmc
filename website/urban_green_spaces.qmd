---
title: "Adovocating for Equitable Access to Urban Green Spaces"
author: "Mikaely Evans"
format: 
  html:
    page-layout: full
---

Green space has been shown to improve mental health... xyz we can cite the papers we read earlier in our lit review.

```{r, message=FALSE, echo=FALSE}
library(httr)
library(jsonlite)
library(sf)
library(ggplot2)
library(ggspatial)
library(dplyr)
library(tidyr)
library(stringr)
```

```{r, message=FALSE, echo=FALSE, include=FALSE}
# Downloading MN All Park ArcGIS data from Metropolitan Council
base_url2 <- "https://services.arcgis.com/afSMGVsC7QlRK1kZ/arcgis/rest/services/Parks/FeatureServer/0/query"
# geometryType=esriGeometryEnvelope&geometry={xmin: -104, ymin: 35.6, xmax: -94.32, ymax: 41}
# {
#   "x": <x>,
#   "y": <y>,
#   "z": <z>,
#   "m": <m>,
#   "id":<id>,
#   "spatialReference": { <spatialReference> }
# }
query_params2 <- list(
  geometry = '{
    "xmin": -10394540.56,
    "ymin": 5603024.26,
    "xmax": -10373503.03,
    "ymax":  5629581.38,
    "spatialReference": {"wkid":102100} 
  }',
  geometryType2 = "esriGeometryEnvelope",
  outFields = "*",
  f = "geojson"
)
response2 <- GET(base_url2, query = query_params2)
geojson_data2 <- content(response2, as = "text", encoding = "UTF-8") %>% fromJSON()
temp_geojson2 <- tempfile(fileext = ".geojson")

writeBin(content(response2, as = "raw"), temp_geojson2)
# Read the GeoJSON data as a shape file object
geojson_sf_2 <- st_read(temp_geojson2)
```

```{r, echo=FALSE, include = FALSE}
# Downloading other important data from GitHub
svi <- read.csv("../data/clean/svi.csv")
holc <- st_read("../data/clean/redlining_msp_shp/redlining_msp.shp")
```

```{r, echo=FALSE, include=FALSE}
library(tigris)
library(tidycensus)
options(tigris_use_cache = TRUE) 
mn_census_tract <- tracts(state = "MN", cb = FALSE, year = 2022) %>%
  filter(COUNTYFP == "053") # collect hennepin county census tracts

minneapolis_boundary <- places(state = "MN", year = 2022, class = "sf") %>%
  filter(NAME == "Minneapolis")

mn_lake <- area_water(state = "MN", count = 'Hennepin')

mpls_tracts <- st_intersection(mn_census_tract, minneapolis_boundary)
mpls_lakes <- st_intersection(mn_lake, minneapolis_boundary)

mpls_tracts <- st_transform(mpls_tracts, 4326) # make the same crs
mpls_lakes <- st_transform(mpls_lakes, 4326) # make the same crs

parks_in_tracts <- st_intersection(mpls_tracts, geojson_sf_2) # get overlapping area
parks_in_tracts_2 <- parks_in_tracts %>% 
  st_difference(st_union(mpls_lakes)) 

lakeless_tracts <- mpls_tracts %>% 
  st_difference(st_union(mpls_lakes)) 
```

```{r, echo = FALSE, include = FALSE}
# Goal: Create data frame with park area per tract
parks_in_tracts_3 <- parks_in_tracts_2 %>%
  group_by(GEOID) %>% # Group by census tract
  mutate(total_park_area = (sum(ACRES)*4046.86)) %>% # add total park acres per census tract and convert units
  select(GEOID, total_park_area) %>% # select important cols
  distinct(GEOID, .keep_all = TRUE) %>% # Get one number for each tract
  st_drop_geometry() # Drop geometry for further data merge

# It is okay to drop geometry here because we are only going for the number area, not the shape of the park areas in the census tracts.

lakeless_tracts <- st_make_valid(lakeless_tracts)

# Goal: Add the total_park_area column to the mn_census_tract data so we can make a map with the total_park_area as the fill variable
mn_census_tract_2 <- lakeless_tracts %>%
  left_join(parks_in_tracts_3, by = "GEOID") %>% # Match all ocurrences
  mutate(total_park_area = replace_na(total_park_area, 0)) %>%
  mutate(park_area_ratio = total_park_area / st_area(lakeless_tracts)) %>%
  mutate(park_area_ratio = str_remove(park_area_ratio, "[1/m^2]")) %>%
  mutate(park_area_ratio = as.numeric(park_area_ratio))
```




